generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator json {
  // https://github.com/arthurfiorette/prisma-json-types-generator
  provider = "prisma-json-types-generator"
}

model Assistant {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @ignore

  description  String?
  file_ids     String[] @default([])
  instructions String?
  /// [Metadata]
  metadata     Json?
  model        String
  name         String?
  /// [Tool]
  tools        Json[]   @default([])
  /// [AssistantObject]
  object       String   @default("assistant")

  files     AssistantFile[]
  messages  Message[]
  user_preferences  UserPreference[]
}

model UserPreference {
  id  String @id @default(cuid())
  preference String?
  created_at DateTime @default(now())
  
  assistant_id String
  assistant Assistant @relation(fields: [assistant_id], references: [id], onDelete: Cascade)

  @@index([assistant_id, id])
}

model AssistantFile {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @ignore

  assistant_id String
  /// [AssistantFileObject]
  object       String @default("assistant.file")

  assistant Assistant @relation(fields: [assistant_id], references: [id], onDelete: Cascade)

  @@index([assistant_id, id])
}

model Message {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  content      String
  file_ids     String[] @default([])
  metadata     Json?
  role         Role
  assistant_id String?
  thread_id    String?
  /// [MessageObject]
  object       String   @default("thread.message")

  assistant Assistant? @relation(fields: [assistant_id], references: [id], onDelete: Cascade)
}

enum Role {
  assistant
  user
  system
  function
  tool
}